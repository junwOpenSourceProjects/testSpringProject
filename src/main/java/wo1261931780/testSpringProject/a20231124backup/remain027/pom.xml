<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>wo1261931780</groupId>
	<artifactId>JOSP-SystemTempleJava</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>JOSP-SystemTempleJava</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>

		<!--=============================================================================================-->
		<!--下面两个配置基本地启动，后面的按需修改-->
		<!--=============================================================================================-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<!--spring网络WEB-->
		<!--使用Spring MVC构建Web，包括RESTful，应用程序。使用Apache Tomcat作为默认的嵌入式容器。-->
		<!--里面已经包含了spring MVC的内容-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!--<scope>test</scope>-->
			<!--上面的scope表示作用范围-->
			<!--在没有说明的情况下，scope默认就是compile-->
			<!--如果我把mysql这些数据库驱动jar包设置为runtime-->
			<!--那么我在日常使用的过程中，是无法访问这些类的-->
		</dependency>

		<!--=============================================================================================-->
		<!--spring-->
		<!--=============================================================================================-->

		<!--Spring Aspects将Spring与AspectJ整合在一起。-->
		<!--AOP切面编程的依赖-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>
		<!--一开始是在spring boot context里面-->
		<!--现在是在cache里面-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<!--Spring Boot DevTools 开发人员工具-->
		<!--提供快速的应用重启、LiveReload和配置，以增强开发体验。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<!--Spring配置处理器 开发者工具-->
		<!--为开发人员生成元数据，以便在使用自定义配置键（ex.application.properties/.yml文件）时提供上下文帮助和 "代码完成"。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
			<!--添加以后，可以避免自动装配报错-->
		</dependency>
		<!--使用Spring Boot的Actuator的入门课程，它提供了生产准备的功能，帮助你监控和管理你的应用程序。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--=============================================================================================-->
		<!--DEVELOPER_TOOLS-->
		<!--=============================================================================================-->
		<!--Lombok 开发者工具-->
		<!--帮助减少模板代码的Java注释库。-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
			<scope>provided</scope>
			<!--因为只是源代码中提供了对应的功能-->
			<!--所以其实不需要参与源代码的打包-->
		</dependency>
		<!--字符串不为空的判断工具-->
		<dependency>
			<groupId>cn.hutool</groupId>
			<artifactId>hutool-all</artifactId>
			<version>5.8.15</version>
		</dependency>
		<!--=============================================================================================-->
		<!--WEB-->
		<!--=============================================================================================-->
		<!--Spring Web Services WEB-->
		<!--为契约优先的SOAP开发提供了便利。允许使用许多操作XML有效载荷的方法之一来创建灵活的Web服务。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>
		<!--相比来说，jetty更加轻量，而且拓展性更强-->
		<!--tomcat是apache的，而jetty是eclipse的-->
		<!--以后可能jetty是开发的主流-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.boot</groupId>-->
		<!--	<artifactId>spring-boot-starter-jetty</artifactId>-->
		<!--因为starter-web中是没有jetty存在的，所以这里暂时不修改启动服务器-->
		<!--</dependency>-->

		<!--Java Servlet是Java企业平台中的基础网络规范。开发人员可以使用Servlet API构建Web应用程序，与请求/响应工作流进行交互。-->
		<!--<dependency>-->
		<!--	<groupId>javax.servlet</groupId>-->
		<!--	<artifactId>javax.servlet-api</artifactId>-->
		<!--	<version>4.0.1</version>-->
		<!--	<scope>provided</scope>-->
		<!--	&lt;!&ndash;必须把scope变成provide，否则会和tomcat发生冲突&ndash;&gt;-->
		<!--</dependency>-->
		<!--spring的反应性网络WEB-->
		<!--使用Spring WebFlux和Netty构建反应式Web应用。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<!--Spring Session WEB-->
		<!--为管理用户会话信息提供API和实现。-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.session</groupId>-->
		<!--	<artifactId>spring-session-jdbc</artifactId>-->
		<!--</dependency>-->
		<!--阿里巴巴的Fastjson是一个用Java编写的JSON处理器（JSON解析器+JSON生成器）。-->
		<!--用2.0.23,否则和dubbo冲突-->
		<dependency>
			<groupId>com.alibaba.fastjson2</groupId>
			<artifactId>fastjson2</artifactId>
			<version>2.0.23</version>
		</dependency>


		<!--=============================================================================================-->
		<!--MESSAGING-->
		<!--=============================================================================================-->
		<!--使用Spring AMQP和Rabbit MQ的启动程序-->
		<!--添加以后会在控制台报错，Rabbit health check failed-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.boot</groupId>-->
		<!--	<artifactId>spring-boot-starter-amqp</artifactId>-->
		<!--</dependency>-->
		<!--&lt;!&ndash;Spring for RabbitMQ 消息&ndash;&gt;-->
		<!--&lt;!&ndash;为您的应用程序提供一个用于发送和接收消息的通用平台，并为您的消息提供一个安全的地方，直到收到为止。&ndash;&gt;-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.amqp</groupId>-->
		<!--	<artifactId>spring-rabbit-test</artifactId>-->
		<!--	<scope>test</scope>-->
		<!--</dependency>-->
		<!--Apache Kafka Streams的Spring 讯息交流-->
		<!--使用Apache Kafka Streams构建流处理应用程序。-->
		<!--Spring for Apache Kafka MESSAGING-->
		<!--发布、订阅、存储和处理记录流。-->
		<!--<dependency>-->
		<!--	<groupId>org.apache.kafka</groupId>-->
		<!--	<artifactId>kafka-clients</artifactId>-->
		<!--	<version>3.4.0</version>-->
		<!--</dependency>-->
		<!--<dependency>-->
		<!--	<groupId>org.scala-lang</groupId>-->
		<!--	<artifactId>scala-library</artifactId>-->
		<!--	<version>2.13.10</version>-->
		<!--</dependency>-->
		<!--&lt;!&ndash;JMS支持包，包括用于发送/接收JMS消息的辅助类&ndash;&gt;-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework</groupId>-->
		<!--	<artifactId>spring-jms</artifactId>-->
		<!--</dependency>-->


		<!--=============================================================================================-->
		<!--日志系统-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--数据库-->
		<!--=============================================================================================-->
		<!--JDBC API SQL-->
		<!--数据库连接API，定义了客户端如何连接和查询数据库。-->
		<!--没有配置，项目报错，启动失败-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<!--spring操作数据库的包-->
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>

		<!--Spring Data JDBC SQL-->
		<!--使用Spring Data，用普通的JDBC在SQL存储中保存数据。-->
		<!--没有配置，项目报错，启动失败-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<!--MySQL JDBC driver.驱动-->
		<!--mysql的驱动-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.32</version>
			<scope>runtime</scope>
		</dependency>


		<!--=============================================================================================-->
		<!--Mybatis-->
		<!--=============================================================================================-->
		<!--mybatis的分页助手插件-->
		<!--<dependency>-->
		<!--	<groupId>com.github.pagehelper</groupId>-->
		<!--	<artifactId>pagehelper</artifactId>-->
		<!--	<version>5.3.2</version>-->
		<!--</dependency>-->
		<!--MyBatis框架SQL-->
		<!--持久性框架，支持自定义SQL，存储过程和高级映射。MyBatis使用XML描述符或注解将对象与存储程序或SQL语句结合起来。-->
		<!--这里是mybatis按照spring的标准，开发出来的整合包-->
		<!--没有配置，项目报错，启动失败-->
		<!--<dependency>-->
		<!--	<groupId>org.mybatis.spring.boot</groupId>-->
		<!--	<artifactId>mybatis-spring-boot-starter</artifactId>-->
		<!--	<version>3.0.1</version>-->
		<!--</dependency>-->

		<!--使用mybatis-plus以后，这些东西就不需要了-->
		<!--没有配置，项目报错，启动失败-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
			<version>3.5.3.1</version>
			<!--依赖中一共两个jar包-->
			<!--一个是mybatis和spring整合包-->
			<!--一个是mybatis包-->
		</dependency>
		<!-- mybatis-plus 多数据源 -->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>dynamic-datasource-spring-boot-starter</artifactId>
			<version>3.5.0</version>
		</dependency>

		<!--mybatis-plus的代码生成器-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-generator</artifactId>
			<version>3.5.3.1</version>
		</dependency>

		<!--生成器对应的模板技术-->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<version>2.3</version>
		</dependency>


		<!--=============================================================================================-->
		<!--数据库连接池-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--redis的包-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--TEST-->
		<!--=============================================================================================-->
		<!--使用包括JUnit Jupiter、Hamcrest和Mockito在内的库测试Spring Boot应用程序的入门者-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--Spring Test支持用JUnit或TestNG对Spring组件进行单元测试和集成测试。-->
		<!--它提供了一致的Spring ApplicationContexts的加载和缓存，并提供了模拟对象，你可以用它来孤立地测试你的代码。-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>

		<!--=============================================================================================-->
		<!--安全框架-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--dubbo相关-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--文件IO-->
		<!--=============================================================================================-->
		<!-- 文件上传组件 -->
		<dependency>
			<!--注掉，和Commons-io有冲突-->
			<!--但是比Commons-io范围大-->
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.5</version>
		</dependency>


		<!--=============================================================================================-->
		<!--项目特殊依赖-->
		<!--=============================================================================================-->
		<!--这里需要使用swagger技术，实际上是为了生成接口文档-->
		<dependency>
			<groupId>com.github.xiaoymin</groupId>
			<artifactId>knife4j-spring-boot-starter</artifactId>
			<version>3.0.3</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
