<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>wo1261931780</groupId>
	<artifactId>testSpringProject</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<!--boot程序可以不依赖tomcat和idea，直接打包为jar然后运行-->
	<!--但是数据库是独立的，只要在jar项目中，指定好数据库连接，就可以直接使用了-->
	<!--这就是所谓的前后端分离项目-->
	<name>testSpringProject</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<!--跟着父项目走，直接去找上面的依赖-->
	<!--最后找到的是spring-boot-dependencies-->
	<!--所有的依赖中，已经配置好了最佳的版本号，直接在这里继承就可以直接使用-->
	<!--但是在父项目中，只是完成了配置，具体是否使用，是没有直接强制要求的-->
	<!--所以，在spring boot项目中，部分依赖是不需要指定版本的，只需要说明具体的依赖种类，就可以完成导入-->
	<dependencies>
		<!--=============================================================================================-->
		<!--下面两个配置基本的启动，后面的按需修改-->
		<!--=============================================================================================-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<!--spring网络WEB-->
		<!--使用Spring MVC构建Web，包括RESTful，应用程序。使用Apache Tomcat作为默认的嵌入式容器。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!--跟着父项目走，直接去找上面的依赖-->
		<!--最后找到的是spring-boot-dependencies-->
		<!--所有的依赖中，已经配置好了最佳的版本号，直接在这里继承就可以直接使用-->
		<!--但是在父项目中，只是完成了配置，具体是否使用，是没有直接强制要求的-->
		<!--所以，在spring boot项目中，部分依赖是不需要指定版本的，只需要说明具体的依赖种类，就可以完成导入-->

		<!--=============================================================================================-->
		<!--DEVELOPER_TOOLS-->
		<!--=============================================================================================-->
		<!--Spring Boot DevTools 开发人员工具-->
		<!--提供快速的应用重启、LiveReload和配置，以增强开发体验。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<!--2022年7月30日15:24:38，手动导入这个依赖项-->
		<!--才能去新建一个spring的xml配置-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>6.0.3</version>
			<!--这里不能修改context版本到6.0，否则aop会找不到class文件-->
		</dependency>
		<!--Lombok 开发者工具-->
		<!--帮助减少模板代码的Java注释库。-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
			<scope>provided</scope>
			<!--因为只是源代码中提供了对应的功能-->
			<!--所以其实不需要参与源代码的打包-->
		</dependency>
		<!--Spring配置处理器 开发者工具-->
		<!--为开发人员生成元数据，以便在使用自定义配置键（ex.application.properties/.yml文件）时提供上下文帮助和 "代码完成"。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
			<!--添加以后，可以避免自动装配报错-->
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.9.19</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.experimental</groupId>
			<artifactId>spring-native</artifactId>
			<version>${spring-native.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
			<version>3.0.1</version>
		</dependency>
		<!--=============================================================================================-->
		<!--WEB-->
		<!--=============================================================================================-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.boot</groupId>-->
		<!--	<artifactId>spring-boot-starter-web</artifactId>-->
		<!--这个依赖和上面的重复了，所以暂时不弄-->
		<!--起步依赖，这里就包含了spring web和spring mvc的依赖-->
		<!--<exclusions>-->
		<!--	<exclusion>-->
		<!--		<groupId>org.springframework.boot</groupId>-->
		<!--		<artifactId>spring-boot-starter-tomcat</artifactId>-->
		<!--	</exclusion>-->
		<!--这里又回到可选依赖和排除依赖的问题-->
		<!--可选依赖是不透明的-->
		<!--排除依赖是透明的-->
		<!--我们要修改父类中的依赖，不使用tomcat，而使用jetty-->
		<!--就需要使用排除依赖-->
		<!--</exclusions>-->
		<!--</dependency>-->

		<!--Spring Web Services WEB-->
		<!--为契约优先的SOAP开发提供了便利。允许使用许多操作XML有效载荷的方法之一来创建灵活的Web服务。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>
		<!--<dependency>-->
		<!--	<groupId>org.springframework.boot</groupId>-->
		<!--	<artifactId>spring-boot-starter-jetty</artifactId>-->
		<!--因为starter-web中是没有jetty存在的，所以这里暂时不修改启动服务器-->
		<!--</dependency>-->
		<!--相比来说，jetty更加轻量，而且拓展性更强-->
		<!--tomcat是apache的，而jetty是eclipse的-->
		<!--以后可能jetty是开发的主流-->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
			<!--必须把scope变成provide，否则会和tomcat发生冲突-->
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<!--<version>6.0.3</version>-->
			<!--mvc是一个整合包-->
			<!--除了基础的context包以外，还会有web包作为web开发的整合包-->
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.14.1</version>
		</dependency>


		<!--spring安全 SECURITY-->
		<!--为Spring应用程序提供高度可定制的认证和访问控制框架。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--spring的反应性网络WEB-->
		<!--使用Spring WebFlux和Netty构建反应式Web应用。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>


		<!--=============================================================================================-->
		<!--MESSAGING-->
		<!--=============================================================================================-->
		<!--Spring for RabbitMQ 消息-->
		<!--为您的应用程序提供一个用于发送和接收消息的通用平台，并为您的消息提供一个安全的地方，直到收到为止。-->
		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--Spring Session WEB-->
		<!--为管理用户会话信息提供API和实现。-->
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-jdbc</artifactId>
		</dependency>
		<!--Apache Kafka Streams的Spring 讯息交流-->
		<!--使用Apache Kafka Streams构建流处理应用程序。-->
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<!--Spring for Apache Kafka MESSAGING-->
		<!--发布、订阅、存储和处理记录流。-->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<!--		这个包比较大，暂时不弄-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.kafka</groupId>-->
		<!--	<artifactId>spring-kafka-test</artifactId>-->
		<!--	<scope>test</scope>-->
		<!--</dependency>-->
		<!--使用下面的包完成替换：-->
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>2.13.10</version>
		</dependency>
		<!--WebSocket信息传递-->
		<!--使用SockJS和STOMP构建基于Servlet的WebSocket应用程序。-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<!--=============================================================================================-->
		<!--SQL-->
		<!--=============================================================================================-->
		<!--JDBC API SQL-->
		<!--数据库连接API，定义了客户端如何连接和查询数据库。-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.boot</groupId>-->
		<!--	&lt;!&ndash;spring操作数据库的包&ndash;&gt;-->
		<!--	<artifactId>spring-boot-starter-data-jdbc</artifactId>-->
		<!--</dependency>-->
		<!--Spring Data JDBC SQL-->
		<!--使用Spring Data，用普通的JDBC在SQL存储中保存数据。-->
		<!--<dependency>-->
		<!--	<groupId>org.springframework.boot</groupId>-->
		<!--	<artifactId>spring-boot-starter-jdbc</artifactId>-->
		<!--</dependency>-->
		<!--MyBatis框架SQL-->
		<!--持久性框架，支持自定义SQL，存储过程和高级映射。MyBatis使用XML描述符或注解将对象与存储程序或SQL语句结合起来。-->
		<!--<dependency>-->
		<!--	<groupId>org.mybatis.spring.boot</groupId>-->
		<!--	<artifactId>mybatis-spring-boot-starter</artifactId>-->
		<!--	<version>3.0.0</version>-->
		<!--</dependency>-->
		<!--MySQL JDBC driver.驱动-->
		<!--mysql的驱动-->
		<!--<dependency>-->
		<!--	<groupId>mysql</groupId>-->
		<!--	<artifactId>mysql-connector-java</artifactId>-->
		<!--	<scope>runtime</scope>-->
		<!--</dependency>-->
		<!--spring整合数据库操作的包-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>
		<!--底下的是spring整合mybatis的包-->
		<!--这里，会根据mybatis的版本出现差异-->
		<!--和上课教程也不太一样，-->
		<!--这里说的是org.singledog-->
		<!--上课说的是org.mybatis-->
		<dependency>
			<groupId>org.singledog</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.3</version>
		</dependency>
		<!--mybatis相关的包-->
		<!--<dependency>-->
		<!--	&lt;!&ndash;我不确定这个是否需要&ndash;&gt;-->
		<!--	<groupId>org.mybatis</groupId>-->
		<!--	<artifactId>mybatis</artifactId>-->
		<!--	<version>3.5.11</version>-->
		<!--</dependency>-->
		<!--<dependency>-->
		<!--	&lt;!&ndash;这里是mybatis按照spring的标准，开发出来的整合包&ndash;&gt;-->
		<!--	<groupId>org.mybatis.spring.boot</groupId>-->
		<!--	<artifactId>mybatis-spring-boot-starter</artifactId>-->
		<!--	<version>3.0.1</version>-->
		<!--</dependency>-->
		<!--使用mybatis-plus以后，这些东西就不需要了-->
		<!--<dependency>-->
		<!--	<groupId>com.baomidou</groupId>-->
		<!--	<artifactId>mybatis-plus-boot-starter</artifactId>-->
		<!--	<version>3.5.3.1</version>-->
		<!--	&lt;!&ndash;依赖中一共两个jar包&ndash;&gt;-->
		<!--	&lt;!&ndash;一个是mybatis和spring整合包&ndash;&gt;-->
		<!--	&lt;!&ndash;一个是mybatis包&ndash;&gt;-->
		<!--</dependency>-->
		<!--mybatis-plus的代码生成器-->
		<!--<dependency>-->
		<!--	<groupId>com.baomidou</groupId>-->
		<!--	<artifactId>mybatis-plus-generator</artifactId>-->
		<!--	<version>3.5.3.1</version>-->
		<!--</dependency>-->
		<!--生成器对应的模板技术-->
		<!--<dependency>-->
		<!--	<groupId>org.apache.velocity</groupId>-->
		<!--	<artifactId>velocity-engine-core</artifactId>-->
		<!--	<version>2.3</version>-->
		<!--</dependency>-->
		<!--c3p0相关包-->
		<!--<dependency>-->
		<!--	&lt;!&ndash;c3p0是一个连接池对象&ndash;&gt;-->
		<!--	<groupId>c3p0</groupId>-->
		<!--	<artifactId>c3p0</artifactId>-->
		<!--	<version>0.9.1.2</version>-->
		<!--</dependency>-->
		<!--<dependency>-->
		<!--	<groupId>com.alibaba</groupId>-->
		<!--	<artifactId>druid</artifactId>-->
		<!--	<version>1.2.15</version>-->
		<!--</dependency>-->
		<!--=============================================================================================-->
		<!--TEST-->
		<!--=============================================================================================-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
			<!--<version>4.13.1</version>-->
		</dependency>

		<!--=============================================================================================-->
		<!--项目特殊依赖-->
		<!--=============================================================================================-->
		<!--<dependency>-->
		<!--	<groupId>org.apiguardian</groupId>-->
		<!--	<artifactId>apiguardian-api</artifactId>-->
		<!--	<version>1.1.2</version>-->
		<!--</dependency>-->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>5.9.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.9.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.9.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<version>5.9.2</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-commons -->
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-commons</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-engine</artifactId>
			<version>1.9.2</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.opentest4j/opentest4j -->
		<dependency>
			<groupId>org.opentest4j</groupId>
			<artifactId>opentest4j</artifactId>
			<version>1.2.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.dom4j/dom4j -->
		<dependency>
			<groupId>org.dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>2.1.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/xom/xom -->
		<!--<dependency>-->
		<!--	<groupId>xom</groupId>-->
		<!--	<artifactId>xom</artifactId>-->
		<!--	<version>1.3.8</version>-->
		<!--</dependency>-->
		<dependency>
			<groupId>xalan</groupId>
			<artifactId>xalan</artifactId>
			<version>2.7.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.4.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.4.5</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>2.0.6</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.11.0</version>
		</dependency>
	</dependencies>

	<build>
		<!--<resources>-->
		<!--	<resource>-->
		<!--		<directory>src/main/java</directory>-->
		<!--		<includes>-->
		<!--			<include>**/*.*</include>-->
		<!--		</includes>-->
		<!--		<excludes>-->
		<!--			<exclude>**/*.java</exclude>-->
		<!--		</excludes>-->
		<!--	</resource>-->
		<!--</resources>-->
		<!--这里有个神奇的bug，csdn说是没有扫描到对应的文件-->
		<!--所以需要添加上面的配置-->
		<!--但是我用idea自带的创建工具，就在路径下创建了一个完全相同的路径，然后在里面自动创建了一个配置文件-->
		<!--但是上面两个都是无效的-->
		<!--我使用idea自带的配置文件创建工具，直接创建对应名称对象，就解决了该问题-->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
					<classifier>${repackage.classifier}</classifier>
					<image>
						<builder>paketobuildpacks/builder:tiny</builder>
						<env>
							<BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
						</env>
					</image>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.0</version>
				<!--添加这个插件以后，我们就可以直接使用pom中的配置文件-->
				<!--接着，其它地方就可以解析这里的配置参数-->
				<configuration>
					<encoding>UTF-8</encoding>
					<useDefaultDelimiters>true</useDefaultDelimiters>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.experimental</groupId>
				<artifactId>spring-aot-maven-plugin</artifactId>
				<version>${spring-native.version}</version>
				<executions>
					<execution>
						<id>test-generate</id>
						<goals>
							<goal>test-generate</goal>
						</goals>
					</execution>
					<execution>
						<id>generate</id>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!--<build>-->
	<!--下面是使用tomcat来启动项目的配置-->
	<!--因为课程中使用的是tomcat服务器-->
	<!--但是我们这里使用的是spring作为容器-->
	<!--所以先保留一下，后面自己测试的时候说不定要使用-->
	<!--	<plugins>-->
	<!--		<plugin>-->
	<!--			<groupId>org.apache.tomcat.maven</groupId>-->
	<!--			<artifactId>tomcat7-maven-plugin</artifactId>-->
	<!--			<version>2.1</version>-->
	<!--			<configuration>-->
	<!--				<port>80</port>-->
	<!--				<path>/</path>-->
	<!--			</configuration>-->
	<!--		</plugin>-->
	<!--	</plugins>-->
	<!--</build>-->
	<repositories>
		<repository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/release</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/release</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</pluginRepository>
	</pluginRepositories>
	<profiles>
		<!--下面实际上就是配置多环境运行的配置-->
		<profile>
			<id>native</id>
			<properties>
				<repackage.classifier>exec</repackage.classifier>
				<native-buildtools.version>0.9.13</native-buildtools.version>
			</properties>
			<dependencies>
				<dependency>
					<groupId>org.junit.platform</groupId>
					<artifactId>junit-platform-launcher</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.graalvm.buildtools</groupId>
						<artifactId>native-maven-plugin</artifactId>
						<version>${native-buildtools.version}</version>
						<extensions>true</extensions>
						<executions>
							<execution>
								<id>test-native</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
							</execution>
							<execution>
								<id>build-native</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
				<!--我们上面配置的文件，实际上也只能在pom文件中使用-->
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>test</spring.profiles.active>
			</properties>
		</profile>
	</profiles>
</project>
